// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace StartML
{
    public partial class TestModel
    {
        /// <summary>
        /// model input class for TestModel.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"Temperature (K)")]
            public float Temperature__K_ { get; set; }

            [ColumnName(@"Luminosity(L/Lo)")]
            public float Luminosity_L_Lo_ { get; set; }

            [ColumnName(@"Radius(R/Ro)")]
            public float Radius_R_Ro_ { get; set; }

            [ColumnName(@"Absolute magnitude(Mv)")]
            public float Absolute_magnitude_Mv_ { get; set; }

            [ColumnName(@"Star type")]
            public float Star_type { get; set; }

            [ColumnName(@"Star color")]
            public string Star_color { get; set; }

            [ColumnName(@"Spectral Class")]
            public string Spectral_Class { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for TestModel.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"Temperature (K)")]
            public float Temperature__K_ { get; set; }

            [ColumnName(@"Luminosity(L/Lo)")]
            public float Luminosity_L_Lo_ { get; set; }

            [ColumnName(@"Radius(R/Ro)")]
            public float Radius_R_Ro_ { get; set; }

            [ColumnName(@"Absolute magnitude(Mv)")]
            public float Absolute_magnitude_Mv_ { get; set; }

            [ColumnName(@"Star type")]
            public uint Star_type { get; set; }

            [ColumnName(@"Star color")]
            public float[] Star_color { get; set; }

            [ColumnName(@"Spectral Class")]
            public float[] Spectral_Class { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"PredictedLabel")]
            public float PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float[] Score { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("TestModel.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
